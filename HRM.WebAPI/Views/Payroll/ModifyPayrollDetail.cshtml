@model HRM.Core.Model.VMModifyPayroll
@{
    Layout = "/Views/Shared/_LayoutWOSidebar.cshtml";
    ViewBag.Title = "HRMS - Payslip Detail New";
}
<div class="page-box content-box mrg25B">
    <h3 class="content-box-header bg-blue text-left mrg25B"><i class="glyph-icon icon-table"></i>Payslip Detail</h3>
    @using (Html.BeginForm("ModifyPayrollDetail2", "Payroll", FormMethod.Post, new { @enctype = "multipart/form-data", @id = "PayslipDetailForm", @class = "form-horizontal customclass" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        if (Model.VMModifyPayrollEditList != null)
        {
            <div class="form-group"><div class="col-sm-11"></div><div class="col-sm-1" style="float: right;"><a class="printlink" href="javascript:;" onclick="Print();"><img src="/assets/images/printer.png" style="width: 20px;" />&nbsp;Print</a></div></div>
            <table class="table tblpayslip attendancereport" id="gridtbl">
                <tbody>
                    @for (int i = 0; i < Model.VMModifyPayrollEditList.Count; i++)
                    {
                        if (i == 0)
                        {
                            <tr>
                                <td style="width: 25%">Emp Id:</td>
                                <td>@Model.VMModifyPayrollEditList[0].UserId</td>
                            </tr>
                            <tr>
                                <td style="width: 25%">Emp Name:</td>
                                <td>@Model.VMModifyPayrollEditList[0].UserFName @Model.VMModifyPayrollEditList[0].UserMName @Model.VMModifyPayrollEditList[0].UserLName</td>
                            </tr>
                            <tr>
                                <td>Department:</td>
                                <td>@Model.VMModifyPayrollEditList[0].DepartmentName</td>
                            </tr>
                            <tr>
                                <td>Designation:</td>
                                <td>@(Model.VMModifyPayrollEditList[0].Designation == "" ? "N/A" : @Model.VMModifyPayrollEditList[0].Designation)</td>
                            </tr>
                            <tr>
                                <td>Payroll Cycle:</td>
                                <td>@(Model.VMModifyPayrollEditList[0].PayrollCycleName == "" ? "N/A" : @Model.VMModifyPayrollEditList[0].PayrollCycleName)</td>
                            </tr>
                            <tr>
                                <td>Salary:</td>

                                @if (Model.VMModifyPayrollEditList[0].SalaryTypeId == 1)
                                {
                                    <td>@Model.VMModifyPayrollEditList[0].Salary</td>

                                }
                                @if (Model.VMModifyPayrollEditList[0].SalaryTypeId == 2)
                                {
                                    <td>@Model.VMModifyPayrollEditList[0].Salary*4</td>

                                }
                                @if (Model.VMModifyPayrollEditList[0].SalaryTypeId == 3)
                                {
                                    <td>@Model.VMModifyPayrollEditList[0].Salary*30</td>

                                }
                            </tr>
                            <tr>
                                <td>Net Salary:</td>
                                <td>@Model.VMModifyPayrollEditList[0].NetSalary</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <br />
            <table class="table tblpayslipadd datatable" id="gridAddition">
          <h3>Payroll Detail</h3>
                <thead>
                    <tr class="header">
                        <th>SNo</th>
                        <th style="width: 40%">Title</th>
                        <th style="width: 20%">Addition</th>
                        <th style="width: 20%">Deduction</th>
                        <th style="width: 20%">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int sno = 0;
                    }
                    @for (int j = 0; j < Model.VMModifyPayrollEditList.Count; j++)
                    {
                        <tr>
                            <td>

                                @{ sno++; }
                                @sno
                            </td>
                            <td class="add nmbr PayrollVariableName">@Model.VMModifyPayrollEditList[j].PayrollVariableName</td>
                            <td class="add nmbr Addition">@Model.VMModifyPayrollEditList[j].Addition</td>
                            <td class="add nmbr Deduction">@Model.VMModifyPayrollEditList[j].Deduction</td>
                            <td class="add nmbr"><a href=""> Edit</a> | <a href="">Delete</a></td>
                        </tr>

                    }
                </tbody>
                <tfoot>
                    @*<tr>
                        <td>Total Addition</td>
                        <td><span id="TotalAddition" class="nmbr">0</span></td>
                    </tr>
                    <tr>
                        <td>Total Deductions</td>
                        <td><span id="TotalDeductions" class="nmbr">0</span></td>
                        
                    </tr>*@
                </tfoot>
            </table>


            <br />
            <div class="page-box content-box mrg25B">
                <h3 class="content-box-header bg-blue text-left mrg25B screenheading"><i class="glyph-icon icon-table"></i>Payroll Detail Edit</h3>
                <div class="form-group">
                    <label for="DepartmentID" class="col-sm-4 control-label lblforinput">Payroll Policy: </label>

                    <div class="col-sm-6">
                        @Html.DropDownListFor(m => m.PayrollVariable, ViewBag.PayrollVariable as SelectList, "All PayrollVariable", new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-5"></div>
                    <div class="col-sm-2">
                        <button type="submit" class="btn btn-black">Other</button>
                    </div>
                    <div class="col-sm-5"></div>
                </div>


                <div class="form-group">
                    <label for="UserName" class="col-sm-4 control-label lblforinput">Amount</label>
                    <div class="col-sm-6">

                        @Html.TextBoxFor(m => m.UserName, new { maxlength = "200", @class = "form-control", placeholder = "Amount" })
                    </div>
                </div>
                <div class="form-group">
                    <label for="UserName" class="col-sm-4 control-label lblforinput">Other Variable Name</label>
                    <div class="col-sm-6">

                        @Html.TextBoxFor(m => m.UserName, new { maxlength = "200", @class = "form-control", placeholder = "Enter Name" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-5"></div>
                    <div class="col-sm-2">
                        <button type="submit" class="btn btn-block btn-success">Save</button>
                    </div>

                    <div class="col-sm-2">
                        <button type="submit" class="btn btn-danger">Cancel</button>
                    </div>
                    <div class="col-sm-5"></div>
                </div>
            </div>
                @*<select id="PayrollPolicy" name="PayrollPolicyName">
                    <option value="volvo">Volvo</option>
                    <option value="saab">Saab</option>
                    <option value="fiat">Fiat</option>
                    <option value="audi">Audi</option>
                </select>
                <button type="button">Add New</button>
                <input type="text" name="Name" placeholder="Variable Name" />
                <input type="text" name="amount" />*@

                //Addition Start
                @*<table class="table tblpayslipadd datatable" id="gridDeduction">
        <thead>
            <tr class="header">
                <th style="width: 70%">Addition</th>
                <th style="width: 30%">Amount</th>
            </tr>
        </thead>*@
                @*<tbody>
            @if (Model.Payroll.QuarterDayCount > 0)
            {
                <tr>
                    <td>Quarter Day - @Model.Payroll.QuarterDayCount Day(s)</td>
                    <td class="ded nmbr">@Model.Payroll.QuarterDayAmount</td>
                </tr>
            }
            @if (Model.Payroll.HalfDayCount > 0)
            {
                <tr>
                    <td>Half Day - @Model.Payroll.HalfDayCount Day(s)</td>
                    <td class="ded nmbr">@Model.Payroll.HalfDayAmount</td>
                </tr>
            }
            @if (Model.Payroll.FullDayCount > 0)
            {
                <tr>
                    <td>Full Day - @Model.Payroll.FullDayCount Day(s)</td>
                    <td class="ded nmbr">@Model.Payroll.FullDayAmount</td>
                </tr>
            }
            @if (Model.Payroll.AbsentDayCount > 0)
            {
                <tr>
                    <td>Absent - @Model.Payroll.AbsentDayCount Day(s)</td>
                    <td class="ded nmbr">@Model.Payroll.AbsentDayAmount</td>
                </tr>
            }
        </tbody>*@
                @*<tfoot>
                <tr>
                    <td>Total Addition</td>
                    <td><span id="TotalAddition" class="nmbr">0</span></td>
                </tr>
            </tfoot>
        </table>*@
                //Addition End
                @*<table class="table tblpayslipadd datatable" id="gridDeduction">
            <thead>
                <tr class="header">
                    <th style="width: 70%">Deductions</th>
                    <th style="width: 30%">Amount</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Payroll.QuarterDayCount > 0)
                {
                    <tr>
                        <td>Quarter Day - @Model.Payroll.QuarterDayCount Day(s)</td>
                        <td class="ded nmbr">@Model.Payroll.QuarterDayAmount</td>
                    </tr>
                }
                @if (Model.Payroll.HalfDayCount > 0)
                {
                    <tr>
                        <td>Half Day - @Model.Payroll.HalfDayCount Day(s)</td>
                        <td class="ded nmbr">@Model.Payroll.HalfDayAmount</td>
                    </tr>
                }
                @if (Model.Payroll.FullDayCount > 0)
                {
                    <tr>
                        <td>Full Day - @Model.Payroll.FullDayCount Day(s)</td>
                        <td class="ded nmbr">@Model.Payroll.FullDayAmount</td>
                    </tr>
                }
                @if (Model.Payroll.AbsentDayCount > 0)
                {
                    <tr>
                        <td>Absent - @Model.Payroll.AbsentDayCount Day(s)</td>
                        <td class="ded nmbr">@Model.Payroll.AbsentDayAmount</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td>Total Deductions</td>
                    <td><span id="TotalDeductions" class="nmbr">0</span></td>
                </tr>
            </tfoot>
        </table>
        <br />
        <table class="table tblpayslipadd datatable" id="gridtblNet">
            <tfoot>
                <tr>
                    <td style="width: 70%">Net Salary<br /><span id="NetSalaryInWords"></span></td>
                    <td id="NetSalary" class="nmbr">@Model.Payroll.NetSalary</td>
                </tr>
            </tfoot>
        </table>*@
                }
                }
            </div>
            <iframe name="print_frame" width="0" height="0" frameborder="0" src="about:blank"></iframe>
            <script>
                function addCommas(nStr) {
                    nStr += '';
                    x = nStr.split('.');
                    x1 = x[0];
                    x2 = x.length > 1 ? '.' + x[1] : '';
                    var rgx = /(\d+)(\d{3})/;
                    while (rgx.test(x1)) {
                        x1 = x1.replace(rgx, '$1' + ',' + '$2');
                    }
                    return x1 + x2;
                }

                $(document).ready(function () {
                    var addition = 0, deduction = 0;
                    $('.add').each(function () {
                        addition += parseFloat($(this).text());  // Or this.innerHTML, this.innerText
                    });
                    $('.ded').each(function () {
                        deduction += parseFloat($(this).text());  // Or this.innerHTML, this.innerText
                    });

                    $('#GrossSalary').html(addition.toFixed(2));
                    $('#TotalDeductions').html(deduction.toFixed(2));

                    var netSalary = parseInt($('#NetSalary').html()).toFixed(0);

                    $('#NetSalaryInWords').html(toWords(netSalary) + ' only');

                    $('.nmbr').each(function () {
                        $(this).html(addCommas($(this).html()));
                    });

                });

                function Print() {
                    var printElement = $(".page-box").clone();
                    //printElement.find("h3").hide();
                    printElement.find(".form-group").hide();
                    printElement.find(".printlink").hide();
                    printElement.find("a").each(function (e) { $(this).attr("href", "#"); });

                    printDivCSS = new String('<link rel="stylesheet" type="text/css" href="/assets/helpers/helpers-all.css">');
                    printDivCSS += '<link rel="stylesheet" type="text/css" href="/assets/elements/elements-all.css">';
                    printDivCSS += '<link rel="stylesheet" type="text/css" href="/assets/icons/fontawesome/fontawesome.css">';
                    printDivCSS += '<link rel="stylesheet" type="text/css" href="/assets/icons/linecons/linecons.css">';
                    printDivCSS += '<link rel="stylesheet" type="text/css" href="/assets/snippets/snippets-all.css">';
                    printDivCSS += '<link rel="stylesheet" type="text/css" href="/assets/applications/mailbox.css">';
                    printDivCSS += '<link rel="stylesheet" type="text/css" href="/assets/themes/supina/layout.css">';
                    printDivCSS += '<link id="layout-color" rel="stylesheet" type="text/css" href="/assets/themes/supina/default/layout-color.css">';
                    printDivCSS += '<link id="framework-color" rel="stylesheet" type="text/css" href="/assets/themes/supina/default/framework-color.css">';
                    printDivCSS += '<link rel="stylesheet" type="text/css" href="/assets/themes/supina/border-radius.css">';
                    printDivCSS += '<link rel="stylesheet" type="text/css" href="/assets/helpers/colors.css">';
                    printDivCSS += '<link rel="stylesheet" type="text/css" href="/assets/themes/supina/custom.css">';

                    window.frames["print_frame"].document.body.innerHTML = printDivCSS + ' ' + printElement.html();
                    window.frames["print_frame"].window.focus();
                    setTimeout(function () {
                        window.frames["print_frame"].window.print();
                    }, 1000);
                }

                // Convert numbers to words
                // copyright 25th July 2006, by Stephen Chapman http://javascript.about.com
                // permission to use this Javascript on your web page is granted
                // provided that all of the code (including this copyright notice) is
                // used exactly as shown (you can change the numbering system if you wish)

                // American Numbering System
                var th = ['', 'thousand', 'million', 'billion', 'trillion'];
                // uncomment this line for English Number System
                // var th = ['','thousand','million', 'milliard','billion'];

                var dg = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']; var tn = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen']; var tw = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];
                function toWords(s) { s = s.toString(); s = s.replace(/[\, ]/g, ''); if (s != parseFloat(s)) return 'not a number'; var x = s.indexOf('.'); if (x == -1) x = s.length; if (x > 15) return 'too big'; var n = s.split(''); var str = ''; var sk = 0; for (var i = 0; i < x; i++) { if ((x - i) % 3 == 2) { if (n[i] == '1') { str += tn[Number(n[i + 1])] + ' '; i++; sk = 1; } else if (n[i] != 0) { str += tw[n[i] - 2] + ' '; sk = 1; } } else if (n[i] != 0) { str += dg[n[i]] + ' '; if ((x - i) % 3 == 0) str += 'hundred '; sk = 1; } if ((x - i) % 3 == 1) { if (sk) str += th[(x - i - 1) / 3] + ' '; sk = 0; } } if (x != s.length) { var y = s.length; str += 'point '; for (var i = x + 1; i < y; i++) str += dg[n[i]] + ' '; } return str.replace(/\s+/g, ' '); }

            </script>

