@model HRM.Core.Model.VMEmpLeave

@{
    ViewBag.Title = "HRMS - Apply Leave";
    WebGrid grid = new WebGrid(Model.CurrentLeaveHistory, canSort: true, canPage: true, rowsPerPage: 10);//whenever rowsperpage will be changed, change it in script as well
    WebGrid grid2 = new WebGrid(Model.UpcomingLeaveHistory, canSort: true, canPage: true, rowsPerPage: 10);//whenever rowsperpage will be changed, change it in script as well
    WebGrid grid3 = new WebGrid(Model.PreviousLeaveHistory, canSort: true, canPage: true, rowsPerPage: 10);//whenever rowsperpage will be changed, change it in script as well
}
<style>
    th {
        text-align: left;
    }
</style>
<div class="page-box content-box mrg25B">
    <h3 class="content-box-header bg-blue text-left mrg25B screenheading"><i class="glyph-icon icon-plus"></i>Leave</h3>


    @using (Html.BeginForm("Leave", "Employee", FormMethod.Post, new { @class = "form-horizontal customclass" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        @Html.HiddenFor(m => m.NewLeave.UserId)
        @Html.HiddenFor(m => m.NewLeave.Id)


        @*<div class="form-group">
                <label for="Name" class="col-sm-4 control-label lblforinput">Leave Type</label>
                <div class="col-sm-6">
                    @if (ViewBag.LeaveTypeList != null)
                    {
                        @Html.DropDownListFor(m => m.NewLeave.LeaveTypeId, ViewBag.LeaveTypeList as SelectList, "Select Leave Type", new { @class = "form-control" })
                    }
                    else
                    {
                        <span>Please configure leave type first.</span>
                    }
                </div>
            </div>*@


        <link rel="stylesheet" type="text/css" href="/assets/widgets/datepicker/datepicker.css">
        <div class="form-group">
            <label for="Date" class="col-sm-4 control-label lblforinput">Date From</label>
            <div class="col-sm-6">
                @Html.TextBoxFor(m => m.NewLeave.DateFrom, new { maxlength = "20", @class = "bootstrap-datepicker form-control", @required = "Date From is required", @readonly = "readonly" })
            </div>
        </div>
        <div class="form-group">
            <label for="Date" class="col-sm-4 control-label lblforinput">Date To</label>
            <div class="col-sm-6">
                @Html.TextBoxFor(m => m.NewLeave.DateTo, new { maxlength = "20", @class = "bootstrap-datepicker form-control", @required = "Date To is required", @readonly = "readonly" })
            </div>
        </div>

        <div class="form-group">
            <label for="Name" class="col-sm-4 control-label lblforinput">Reason</label>
            <div class="col-sm-6">
                @Html.TextAreaFor(m => m.NewLeave.Reason, new { maxlength = "200", @class = "form-control", placeholder = "Reason Of Leave", @required = "Reason is required" })
                @Html.ValidationMessageFor(m => m.NewLeave.Reason, null, new { @class = "label-danger" })
            </div>
        </div>

        <div class="form-group">

            @if (ViewBag.ErrorMessage != null && ViewBag.ErrorMessage.ToString() != "")
            {
                <div class="form-group">
                    <div class="row row-lg">
                        <div class="col-sm-12 error">
                            <h4 style="text-align:center" class="alert-danger">@ViewBag.ErrorMessage</h4>
                            <br />
                        </div>

                        <div class="col-sm-5"></div>
                    </div>
                </div>


            }
            @if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage.ToString() != "")
            {
                <div class="form-group">
                    <div class="row row-lg">
                        <div class="col-sm-12 success">
                            <h4 style="text-align:center" class="alert-success">@ViewBag.SuccessMessage</h4>
                            <br />
                        </div>

                        <div class="col-sm-5"></div>
                    </div>
                </div>

            }
            <div class="col-sm-5"></div>
            <div class="col-sm-2">

                @if (ViewBag.LeaveTypeList != null)
                {
                    <button type="submit" class="btn btn-block btn-success saveholiday">Apply</button>
                }

            </div>
            <div class="col-sm-5"></div>
        </div>

    }

    <div class="form-group">
        <div class="col-sm-12">&nbsp;</div>
    </div>
    <div class="form-group row control-label">
        <div class="col-sm-8">
            <h3>Current Month (@DateTime.Now.ToString("MMMM yyyy"))</h3>
        </div>
    </div>
    @{ 
        int j = 0;
    }
    <div class="row row-lg">
        <div class="col-sm-12">
            @if (Model != null && Model.CurrentLeaveHistory != null && Model.CurrentLeaveHistory.Count > 0)
            {
                <table class="table table-striped table-hover datatable">
                    <thead>
                        <tr>
                            <th>SNO</th>
                            <th>Date</th>
                            <th>Reason</th>
                            <th>Comments</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.CurrentLeaveHistory.Count; i++)
                        {
                            {
                                j = i + 1;
                            }
                            <tr>
                                <td>@j</td>
                                @if (@Model.CurrentLeaveHistory[i].Date == null || @Model.CurrentLeaveHistory[i].Date == DateTime.MinValue)
                                {
                                    <td>N/A</td>
                                }
                                else
                                {
                                    DateTime Date = Convert.ToDateTime(@Model.CurrentLeaveHistory[i].Date.Value);
                                    <td>@Date.ToString("dd-MMM-yyyy")</td>
                                }
                                <td>@Model.CurrentLeaveHistory[i].Reason</td>
                                @if (@Model.CurrentLeaveHistory[i].AdminReason == null || @Model.CurrentLeaveHistory[i].AdminReason == "")
                                {
                                    <td>N/A</td>
                                }
                                else
                                {
                                    <td>@Model.CurrentLeaveHistory[i].AdminReason</td>
                                }
                                @if (@Model.CurrentLeaveHistory[i].IsApproved == true && @Model.CurrentLeaveHistory[i].IsReject == false)
                                {
                                    <td>Approved</td>
                                }
                                else if (@Model.CurrentLeaveHistory[i].IsApproved == false && @Model.CurrentLeaveHistory[i].IsReject == true)
                                {
                                    <td>Reject</td>
                                }
                                else if (@Model.CurrentLeaveHistory[i].IsApproved == false && @Model.CurrentLeaveHistory[i].IsReject == false)
                                {
                                    <td>Pending</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
                if (ViewBag.CurrentTotalPages != null)
                {
                    double TotalPages = ViewBag.CurrentTotalPages;
                    if (TotalPages > 1)
                    {
                        <ul class="pagination">
                            <li>@Html.ActionLink("First", "Leave", new { SortOrder = ViewBag.SortOrder, SortBy = "Date", CurrentPageNumber = 1 })</li>

                            @if (ViewBag.CurrentPageNumber == 1)
                            {
                                <li>@Html.ActionLink("Previous", "Leave", new { SortOrder = ViewBag.SortOrder, SortBy = "Date", CurrentPageNumber = ViewBag.CurrentPageNumber })</li>
                            }
                            else
                            {
                                <li>@Html.ActionLink("Previous", "Leave", new { SortOrder = ViewBag.SortOrder, SortBy = "Date", CurrentPageNumber = ViewBag.CurrentPageNumber - 1 })</li>
                            }

                            @for (int i = 1; i <= TotalPages; i++)
                            {


                                if (i == ViewBag.CurrentPageNumber)
                                {
                                    <li class="active">@Html.ActionLink(i.ToString(), "Leave", new { SortOrder = ViewBag.SortOrder, SortBy = "Date", CurrentPageNumber = ViewBag.CurrentPageNumber == 0 ? 1 : ViewBag.PageNumber })</li>
                                }
                                else
                                {
                                    <li>@Html.ActionLink(i.ToString(), "Leave", new { SortOrder = ViewBag.SortOrder, SortBy = "Date", CurrentPageNumber = i.ToString() })</li>
                                }


                            }
                            @if (ViewBag.CurrentPageNumber == TotalPages)
                            {
                                <li>@Html.ActionLink("Next", "Leave", new { SortOrder = ViewBag.SortOrder, CurrentPageNumber = ViewBag.CurrentPageNumber })</li>
                            }
                            else
                            {
                                <li>@Html.ActionLink("Next", "Leave", new { SortOrder = ViewBag.SortOrder, CurrentPageNumber = ViewBag.CurrentPageNumber + 1 })</li>
                            }
                            <li>@Html.ActionLink("Last", "Leave", new { SortOrder = ViewBag.SortOrder, CurrentPageNumber = TotalPages })</li>
                        </ul>
                        }
                    }
                }
            </div>
    </div>
    <div class="form-group">
        <div class="col-sm-12">&nbsp;</div>
    </div>
    <div class="form-group row control-label">
        <div class="col-sm-4">
            <h3>Upcoming Months</h3>
        </div>
    </div>
    <div class="row row-lg">
        <div class="col-sm-12">
            @if (Model != null && Model.UpcomingLeaveHistory != null && Model.UpcomingLeaveHistory.Count > 0)
            {
                <table class="table table-striped table-hover datatable">
                    <thead>
                        <tr>
                            <th>SNO</th>
                            <th>Date</th>
                            <th>Reason</th>
                            <th>Comments</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.UpcomingLeaveHistory.Count; i++)
                        {
                            {
                                j = i + 1;
                            }
                        <tr>
                            <td>@j</td>
                            @if (@Model.UpcomingLeaveHistory[i].Date == null || @Model.UpcomingLeaveHistory[i].Date == DateTime.MinValue)
                            {
                                <td>N/A</td>
                            }
                            else
                            {
                                DateTime Date = Convert.ToDateTime(@Model.UpcomingLeaveHistory[i].Date.Value);
                                <td>@Date.ToString("dd-MMM-yyyy")</td>
                            }
                            <td>@Model.UpcomingLeaveHistory[i].Reason</td>
                            @if (@Model.UpcomingLeaveHistory[i].AdminReason == null || @Model.UpcomingLeaveHistory[i].AdminReason == "")
                            {
                                <td>N/A</td>
                            }
                            else
                            {
                                <td>@Model.UpcomingLeaveHistory[i].AdminReason</td>
                            }
                            @if (@Model.UpcomingLeaveHistory[i].IsApproved == true && @Model.UpcomingLeaveHistory[i].IsReject == false)
                            {
                                <td>Approved</td>
                            }
                            else if (@Model.UpcomingLeaveHistory[i].IsApproved == false && @Model.UpcomingLeaveHistory[i].IsReject == true)
                            {
                                <td>Reject</td>
                            }
                            else if (@Model.UpcomingLeaveHistory[i].IsApproved == false && @Model.UpcomingLeaveHistory[i].IsReject == false)
                            {
                                <td>Pending</td>
                            }
                        </tr>
                        }
                    </tbody>
                </table>
                if (ViewBag.UpcomingTotalPages != null)
                {
                    double TotalPages = ViewBag.UpcomingTotalPages;
                    if (TotalPages > 1)
                    {
                    <ul class="pagination">
                        <li>@Html.ActionLink("First", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", UpcomingPageNumber = 1, PreviousPageNumber = 1, CurrentPageNumber = 1 })</li>

                        @if (ViewBag.PageNumber == 1)
                        {
                            <li>@Html.ActionLink("Previous", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", UpcomingPageNumber = ViewBag.UpcomingPageNumber, CurrentPageNumber = ViewBag.CurrentPageNumber, PreviousPageNumber = ViewBag.PreviousPageNumber })</li>
                        }
                        else
                        {
                            <li>@Html.ActionLink("Previous", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", UpcomingPageNumber = ViewBag.UpcomingPageNumber - 1, CurrentPageNumber = ViewBag.CurrentPageNumber - 1, PreviousPageNumber = ViewBag.PreviousPageNumber - 1 })</li>
                        }

                        @for (int i = 1; i <= TotalPages; i++)
                        {


                            if (i == ViewBag.UpcomingPageNumber)
                            {
                                <li class="active">@Html.ActionLink(i.ToString(), "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", UpcomingPageNumber = ViewBag.UpcomingPageNumber == 0 ? 1 : ViewBag.UpcomingPageNumber, CurrentPageNumber = ViewBag.CurrentPageNumber == 0 ? 1 : ViewBag.CurrentPageNumber, PreviousPageNumber = ViewBag.PreviousPageNumber == 0 ? 1 : ViewBag.PreviousPageNumber })</li>
                            }
                            else
                            {
                                <li>@Html.ActionLink(i.ToString(), "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", UpcomingPageNumber = i.ToString(), CurrentPageNumber = ViewBag.CurrentPageNumber, PreviousPageNumber = ViewBag.PreviousPageNumber })</li>
                            }


                        }
                        @if (ViewBag.UpcomingPageNumber == TotalPages)
                        {
                            <li>@Html.ActionLink("Next", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", UpcomingPageNumber = ViewBag.UpcomingPageNumber, CurrentPageNumber = ViewBag.CurrentPageNumber, PreviousPageNumber = ViewBag.PreviousPageNumber })</li>
                        }
                        else
                        {
                            <li>@Html.ActionLink("Next", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", UpcomingPageNumber = ViewBag.UpcomingPageNumber + 1, CurrentPageNumber = ViewBag.CurrentPageNumber + 1, PreviousPageNumber = ViewBag.PreviousPageNumber + 1 })</li>
                        }
                        <li>@Html.ActionLink("Last", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", UpcomingPageNumber = TotalPages })</li>
                    </ul>
                    }
                }
            }

        </div>
    </div>
    <div class="form-group">
        <div class="col-sm-12">&nbsp;</div>
    </div>
    <div class="form-group row control-label">
        <div class="col-sm-4">
            <h3>Previous Months</h3>
        </div>
    </div>
    <div class="row row-lg">
        <div class="col-sm-12">

            @if (Model != null && Model.PreviousLeaveHistory != null && Model.PreviousLeaveHistory.Count > 0)
            {
                <table class="table table-striped table-hover datatable">
                    <thead>
                        <tr>
                            <th>SNO</th>
                            <th>Date</th>
                            <th>Reason</th>
                            <th>Comments</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.PreviousLeaveHistory.Count; i++)
                        {
                            {
                                j = i + 1;
                            }
                        <tr>
                            <td>@j</td>
                            @if (@Model.PreviousLeaveHistory[i].Date == null || @Model.PreviousLeaveHistory[i].Date == DateTime.MinValue)
                            {
                                <td>N/A</td>
                            }
                            else
                            {
                                DateTime Date = Convert.ToDateTime(@Model.PreviousLeaveHistory[i].Date.Value);
                                <td>@Date.ToString("dd-MMM-yyyy")</td>
                            }
                            <td>@Model.PreviousLeaveHistory[i].Reason</td>
                            @if (@Model.PreviousLeaveHistory[i].AdminReason == null || @Model.PreviousLeaveHistory[i].AdminReason == "")
                            {
                                <td>N/A</td>
                            }
                            else
                            {
                                <td>@Model.PreviousLeaveHistory[i].AdminReason</td>
                            }
                            @if (@Model.PreviousLeaveHistory[i].IsApproved == true && @Model.PreviousLeaveHistory[i].IsReject == false)
                            {
                                <td>Approved</td>
                            }
                            else if (@Model.PreviousLeaveHistory[i].IsApproved == false && @Model.PreviousLeaveHistory[i].IsReject == true)
                            {
                                <td>Reject</td>
                            }
                            else if (@Model.PreviousLeaveHistory[i].IsApproved == false && @Model.PreviousLeaveHistory[i].IsReject == false)
                            {
                                <td>Pending</td>
                            }
                        </tr>
                        }
                    </tbody>
                </table>
                if (ViewBag.PreviousTotalPages != null)
                {
                    double TotalPages = ViewBag.PreviousTotalPages;
                    if (TotalPages > 1)
                    {
                    <ul class="pagination">
                        <li>@Html.ActionLink("First", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", PreviousPageNumber = 1, CurrenPageNumer = 1, UpcomingPageNumber = 1 })</li>

                        @if (ViewBag.PreviousPageNumber == 1)
                        {
                            <li>@Html.ActionLink("Previous", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", PreviousPageNumber = ViewBag.PreviousPageNumber, CurrenPageNumer = ViewBag.CurrenPageNumer, UpcomingPageNumber = ViewBag.UpcomingPageNumber })</li>
                        }
                        else
                        {
                            <li>@Html.ActionLink("Previous", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", PreviousPageNumber = ViewBag.PreviousPageNumber - 1, CurrenPageNumer = ViewBag.CurrenPageNumer - 1, UpcomingPageNumber = ViewBag.UpcomingPageNumber - 1 })</li>
                        }

                        @for (int i = 1; i <= TotalPages; i++)
                        {


                            if (i == ViewBag.PreviousPageNumber)
                            {
                                <li class="active">@Html.ActionLink(i.ToString(), "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", PreviousPageNumber = ViewBag.PreviousPageNumber == 0 ? 1 : ViewBag.PreviousPageNumber, CurrenPageNumer = ViewBag.CurrenPageNumer == 0 ? 1 : ViewBag.CurrenPageNumer, UpcomingPageNumber = ViewBag.UpcomingPageNumber == 0 ? 1 : ViewBag.UpcomingPageNumber })</li>
                            }
                            else
                            {
                                <li>@Html.ActionLink(i.ToString(), "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", PreviousPageNumber = i.ToString(), CurrentPageNumber = ViewBag.CurrenPageNumer, UpcomingPageNumber = ViewBag.UpcomingPageNumber })</li>
                            }


                        }
                        @if (ViewBag.PreviousPageNumber == TotalPages)
                        {
                            <li>@Html.ActionLink("Next", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", PreviousPageNumber = ViewBag.PreviousPageNumber, CurrentPageNumber = ViewBag.CurrentPageNumber, UpcomingPageNumber = ViewBag.UpcomingPageNumber })</li>
                        }
                        else
                        {
                            <li>@Html.ActionLink("Next", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", PreviousPageNumber = ViewBag.PreviousPageNumber + 1, CurrentPageNumber = ViewBag.CurrentPageNumber + 1, UpcomingPageMumber = ViewBag.UpcomingPageMumber + 1 })</li>
                        }
                        <li>@Html.ActionLink("Last", "Leave", new { SortOrder = ViewBag.SortOrder == null ? "Asc" : (ViewBag.SortOrder), SortBy = "Date", PreviousPageNumber = TotalPages })</li>
                    </ul>
                    }
                }
            }

        </div>
    </div>


</div>

<script>
    $(document).ready(function () {
        $('.datatable tbody tr').each(function () {
            var Holiday = new Date($('td:eq(2)', this).html());
            var currDate = new Date();
            //alert(chkDate);

            if (currDate > Holiday) {
                $(this).find('a').removeAttr('href').removeAttr('onclick').attr('title', 'You can not edit holiday in past');
            }
        });

        var pagenmbr = 1;
        var rowsPerPage = 10;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1);
        if (hashes.indexOf('page') >= 0)
            pagenmbr = hashes.substring(hashes.indexOf('page') + 5);

        $('.datatable tbody tr').each(function () {
            var sno = $(this).find('td:first').html();
            $(this).find('td:first').html(((rowsPerPage * pagenmbr) - rowsPerPage) + parseInt(sno));
        });
    });

    $(document).ready(function () {
        $(".error").fadeOut(7000);
        $(".success").fadeOut(7000);
    });
</script>